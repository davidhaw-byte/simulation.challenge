---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
  pdf: default
execute:
  echo: false
  eval: true
---

# üé≤ Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Investment Game üéØ

```{r}
#| label: fig-compounding-simulation
#| fig-cap: "Monte Carlo simulation with compounding account balance"
#| echo: true

# Set seed for reproducibility
suppressPackageStartupMessages(library(tidyverse))

# Set seed for reproducibility
set.seed(123)

# Number of Coin Flips
n_flips <- 35
# Initial account balance
initial_acct <- 1000

# Create simulation data with compounding account balance
sim_data <- tibble(
  sim_num = 1:n_flips,
  coin_flip = rbinom(n = n_flips, size = 1, prob = 0.5)
) %>%
  mutate(
    # Calculate compounding account balance
    account_balance = accumulate(
      coin_flip, 
      .init = initial_acct,
      .f = ~ if_else(.y == 1, .x * 1.5, .x * 0.6)
    )[-1],  # Remove the initial value
    # Calculate the change in account balance for each round
    balance_change = account_balance - lag(account_balance, default = initial_acct)
  )

# Display first 10 results
head(sim_data, 35)

# Summary statistics
cat("\nSimulation Summary:\n")
cat("Initial balance: $", initial_acct, "\n")
cat("Final balance: $", round(tail(sim_data$account_balance, 1), 2), "\n")
cat("Total return: ", round((tail(sim_data$account_balance, 1) / initial_acct - 1) * 100, 2), "%\n")
```

## Question 1:
The expected balance of your account after one coin flip would be $1000 *1.5 = $1500 + $1000 *0.6 = $600 = $2100/2 = $1050. So the expected profit after a coin flip is $1050 - $1000 = $50.

## Question 2:
This expected value is positive so you should expect to have an account balance much higher than $1000. In this expected value situation, you should always play the game expecting to make a profit.

## Question 3:
As seen with the visualization below, our ending account balance by the age of 55 is $24,429. When I was 53 I hit the peak account value of $40,716, which sadly dropped down again but I still ended up with a profit of $23,429. The lowest point I had was two years in, at the age of 22, when I dropped to $540 account balance. Overall, I am very happy with the results, as any profit is a good one, especially one of $23,429.

## üìà Life-Long Investment Journey Visualization of above simulation

```{r}
#| label: fig-life-investment
#| fig-cap: "35-year investment journey showing account balance evolution from age 20 to 55"
#| fig-width: 12
#| fig-height: 8

# Create age-based data
sim_data_with_age <- sim_data %>%
  mutate(
    age = 20 + sim_num - 1,  # Start at age 20
    decade = floor(age / 10) * 10,  # Group by decades
    age_group = case_when(
      age < 30 ~ "20s",
      age < 40 ~ "30s", 
      age < 50 ~ "40s",
      TRUE ~ "50s"
    )
  )

# Create the main visualization
investment_plot <- ggplot(sim_data_with_age, aes(x = age, y = account_balance)) +
  # Add background grid
  theme_minimal() +
  
  # Add decade markers
  geom_vline(xintercept = seq(20, 55, 10), color = "gray90", linetype = "dotted", alpha = 0.7) +
  
  # Add horizontal reference lines
  geom_hline(yintercept = initial_acct, color = "red", linetype = "dashed", alpha = 0.8, size = 1) +
  geom_hline(yintercept = initial_acct * 2, color = "green", linetype = "dashed", alpha = 0.8, size = 1) +
  geom_hline(yintercept = initial_acct * 5, color = "blue", linetype = "dashed", alpha = 0.8, size = 1) +
  
  # Main line showing account balance
  geom_line(color = "darkblue", size = 2, alpha = 0.9) +
  
  # Points colored by win/loss
  geom_point(aes(color = factor(coin_flip)), size = 3, alpha = 0.8) +
  
  # Color scale for wins/losses
  scale_color_manual(
    values = c("0" = "#e74c3c", "1" = "#27ae60"),
    labels = c("Loss", "Win"),
    name = "Coin Flip Result"
  ) +
  
  # Y-axis formatting with even spacing
  scale_y_continuous(
    labels = scales::dollar_format(),
    breaks = seq(0, max(sim_data$account_balance) * 1.1, by = 1000),
    limits = c(0, max(sim_data$account_balance) * 1.1)
  ) +
  
  # X-axis formatting
  scale_x_continuous(
    breaks = seq(20, 55, 5),
    limits = c(20, 55)
  ) +
  
  # Labels and title
  labs(
    title = "üéØ 35-Year Investment Journey: Monte Carlo Simulation",
    subtitle = paste("Starting at $", scales::comma(initial_acct), "| Final: $", scales::comma(round(tail(sim_data$account_balance, 1), 0))),
    x = "Age",
    y = "Account Balance (Log Scale)",
    caption = "Red line: Starting balance | Green line: 2x return | Blue line: 5x return"
  ) +
  
  # Custom theme
  theme(
    plot.title = element_text(size = 18, face = "bold", color = "#2c3e50"),
    plot.subtitle = element_text(size = 14, color = "#7f8c8d", margin = margin(b = 20)),
    plot.caption = element_text(size = 10, color = "#95a5a6", hjust = 0),
    axis.title = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )

# Add annotations for key milestones
investment_plot <- investment_plot +
  # Annotate starting point
  annotate("text", x = 20.5, y = initial_acct * 1.2, 
           label = "Starting\n$1,000", 
           size = 3, color = "red", fontface = "bold") +
  
  # Annotate final point
  annotate("text", x = 54.5, y = tail(sim_data$account_balance, 1) * 1.2, 
           label = paste("Final\n$", scales::comma(round(tail(sim_data$account_balance, 1), 0))), 
           size = 3, color = "darkblue", fontface = "bold") +
  

# Display the plot
print(investment_plot)

# Calculate and display key statistics
cat("\nüìä Investment Journey Statistics:\n")
cat("Starting age: 20\n")
cat("Ending age: 55\n")
cat("Total years: 35\n")
cat("Initial investment: $", scales::comma(initial_acct), "\n")
cat("Final balance: $", scales::comma(round(tail(sim_data$account_balance, 1), 2)), "\n")
cat("Total return: ", round((tail(sim_data$account_balance, 1) / initial_acct - 1) * 100, 2), "%\n")
cat("Annualized return: ", round(((tail(sim_data$account_balance, 1) / initial_acct)^(1/35) - 1) * 100, 2), "%\n")
cat("Win rate: ", round(mean(sim_data$coin_flip) * 100, 1), "%\n")

# Show best and worst years
max_balance_idx <- which.max(sim_data$account_balance)
min_balance_idx <- which.min(sim_data$account_balance)

cat("\nüéØ Key Milestones:\n")
cat("Peak balance: $", scales::comma(round(max(sim_data$account_balance), 2)), " at age ", 20 + max_balance_idx - 1, "\n")
cat("Lowest balance: $", scales::comma(round(min(sim_data$account_balance), 2)), " at age ", 20 + min_balance_idx - 1, "\n")
```

## üé≤ Multiple Simulation Analysis (100 Runs)

```{r}
#| label: fig-multiple-simulations
#| fig-cap: "Analysis of 100 Monte Carlo simulations showing distribution of final outcomes"
#| echo: true

# Load required packages
suppressPackageStartupMessages(library(tidyverse))

# Set parameters for multiple simulations
n_simulations <- 100
n_flips <- 35  # 35 years from age 20 to 55
initial_acct <- 1000

# Function to run a single simulation
run_single_simulation <- function(sim_id) {
  # Generate coin flips for this simulation
  coin_flips <- rbinom(n = n_flips, size = 1, prob = 0.5)
  
  # Calculate account balance over time
  account_balance <- accumulate(
    coin_flips, 
    .init = initial_acct,
    .f = ~ if_else(.y == 1, .x * 1.5, .x * 0.6)
  )[-1]  # Remove initial value
  
  # Return results for this simulation
  tibble(
    simulation_id = sim_id,
    year = 1:n_flips,
    age = 20 + year - 1,
    coin_flip = coin_flips,
    account_balance = account_balance,
    balance_change = account_balance - lag(account_balance, default = initial_acct)
  )
}

# Run 100 simulations
cat("Running", n_simulations, "simulations...\n")
all_simulations <- map_dfr(1:n_simulations, run_single_simulation)

# Calculate final outcomes for each simulation
final_outcomes <- all_simulations %>%
  filter(year == n_flips) %>%
  mutate(
    final_return_pct = (account_balance / initial_acct - 1) * 100,
    annualized_return = ((account_balance / initial_acct)^(1/35) - 1) * 100,
    outcome_category = case_when(
      account_balance > initial_acct * 10 ~ "Outstanding (>10x)",
      account_balance > initial_acct * 5 ~ "Excellent (5-10x)",
      account_balance > initial_acct * 2 ~ "Good (2-5x)",
      account_balance > initial_acct ~ "Profitable (1-2x)",
      TRUE ~ "Loss (<1x)"
    )
  )

# Summary statistics
cat("\nüìä 100 Simulation Results Summary:\n")
cat("Initial investment: $", scales::comma(initial_acct), "\n")
cat("Simulations run: ", n_simulations, "\n")
cat("Years per simulation: ", n_flips, "\n\n")

cat("Final Balance Statistics:\n")
cat("Mean final balance: $", scales::comma(round(mean(final_outcomes$account_balance), 2)), "\n")
cat("Median final balance: $", scales::comma(round(median(final_outcomes$account_balance), 2)), "\n")
cat("Min final balance: $", scales::comma(round(min(final_outcomes$account_balance), 2)), "\n")
cat("Max final balance: $", scales::comma(round(max(final_outcomes$account_balance), 2)), "\n")
cat("Standard deviation: $", scales::comma(round(sd(final_outcomes$account_balance), 2)), "\n\n")

cat("Return Statistics:\n")
cat("Mean return: ", round(mean(final_outcomes$final_return_pct), 2), "%\n")
cat("Median return: ", round(median(final_outcomes$final_return_pct), 2), "%\n")
cat("Mean annualized return: ", round(mean(final_outcomes$annualized_return), 2), "%\n")
cat("Median annualized return: ", round(median(final_outcomes$annualized_return), 2), "%\n\n")

# Count outcomes by category
outcome_summary <- final_outcomes %>%
  count(outcome_category) %>%
  mutate(percentage = round(n / n_simulations * 100, 1))

cat("Outcome Distribution:\n")
print(outcome_summary)

# Calculate probability of different outcomes
profitable_sims <- sum(final_outcomes$account_balance > initial_acct)
cat("\nüéØ Key Probabilities:\n")
cat("Probability of profit: ", round(profitable_sims / n_simulations * 100, 1), "%\n")
cat("Probability of 2x+ return: ", round(sum(final_outcomes$account_balance > initial_acct * 2) / n_simulations * 100, 1), "%\n")
cat("Probability of 5x+ return: ", round(sum(final_outcomes$account_balance > initial_acct * 5) / n_simulations * 100, 1), "%\n")
cat("Probability of 10x+ return: ", round(sum(final_outcomes$account_balance > initial_acct * 10) / n_simulations * 100, 1), "%\n")
cat("Probability of loss: ", round(sum(final_outcomes$account_balance < initial_acct) / n_simulations * 100, 1), "%\n")
```

## üìà Visualization of 100 Simulation Results

```{r}
#| label: fig-simulation-distribution
#| fig-cap: "Distribution and analysis of final outcomes from 100 Monte Carlo simulations"
#| fig-width: 12
#| fig-height: 10

# Load required packages
suppressPackageStartupMessages(library(tidyverse))
library(patchwork)

# Create visualization of final outcomes distribution

# Plot 1: Histogram of final balances
p1 <- ggplot(final_outcomes, aes(x = account_balance)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7, color = "white") +
  geom_vline(xintercept = initial_acct, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = median(final_outcomes$account_balance), color = "green", linetype = "dashed", size = 1) +
  scale_x_continuous(labels = scales::dollar_format()) +
  labs(
    title = "Distribution of Final Account Balances",
    subtitle = paste("100 simulations, median = $", scales::comma(round(median(final_outcomes$account_balance), 0))),
    x = "Final Account Balance",
    y = "Number of Simulations"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(size = 14, face = "bold"))

# Plot 2: Box plot of returns by category
p2 <- ggplot(final_outcomes, aes(x = reorder(outcome_category, account_balance), y = account_balance)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7) +
  geom_hline(yintercept = initial_acct, color = "red", linetype = "dashed") +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    title = "Final Balances by Outcome Category",
    x = "Outcome Category",
    y = "Final Account Balance"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Plot 3: Sample of 20 simulation paths
sample_sims <- all_simulations %>%
  filter(simulation_id <= 20) %>%
  group_by(simulation_id) %>%
  mutate(
    final_balance = max(account_balance),
    outcome_type = if_else(final_balance > initial_acct, "Profitable", "Loss")
  )

p3 <- ggplot(sample_sims, aes(x = age, y = account_balance, group = simulation_id)) +
  geom_line(alpha = 0.6, aes(color = outcome_type)) +
  geom_hline(yintercept = initial_acct, color = "red", linetype = "dashed") +
  scale_y_continuous(labels = scales::dollar_format()) +
  scale_color_manual(values = c("Loss" = "#e74c3c", "Profitable" = "#27ae60")) +
  labs(
    title = "Sample of 20 Simulation Paths",
    subtitle = "Showing account balance evolution over 35 years",
    x = "Age",
    y = "Account Balance",
    color = "Final Outcome"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(size = 14, face = "bold"))

# Plot 4: Win rate distribution
win_rates <- all_simulations %>%
  group_by(simulation_id) %>%
  summarise(win_rate = mean(coin_flip) * 100, .groups = "drop") %>%
  mutate(outcome_category = case_when(
    win_rate >= 60 ~ "High (‚â•60%)",
    win_rate >= 55 ~ "Above Average (55-60%)",
    win_rate >= 45 ~ "Average (45-55%)",
    win_rate >= 40 ~ "Below Average (40-45%)",
    TRUE ~ "Low (<40%)"
  ))

p4 <- ggplot(win_rates, aes(x = win_rate)) +
  geom_histogram(bins = 20, fill = "orange", alpha = 0.7, color = "white") +
  geom_vline(xintercept = 50, color = "red", linetype = "dashed", size = 1) +
  labs(
    title = "Distribution of Win Rates Across Simulations",
    subtitle = paste("Mean win rate: ", round(mean(win_rates$win_rate), 1), "%"),
    x = "Win Rate (%)",
    y = "Number of Simulations"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(size = 14, face = "bold"))

# Combine plots
print((p1 | p2) / (p3 | p4))
```

## üîç Key Insights from 100 Simulations

```{r}
#| echo: false

# Calculate additional insights
cat("## üéØ Key Insights from Monte Carlo Analysis:\n\n")

# Risk analysis
cat("**Risk Analysis:**\n")
cat("- ", round(sum(final_outcomes$account_balance < initial_acct) / n_simulations * 100, 1), "% of simulations resulted in losses\n")
cat("- ", round(sum(final_outcomes$account_balance < initial_acct * 0.5) / n_simulations * 100, 1), "% lost more than half their initial investment\n")
cat("- Standard deviation of final balances: $", scales::comma(round(sd(final_outcomes$account_balance), 0)), "\n\n")

# Extreme outcomes
cat("**Extreme Outcomes:**\n")
cat("- Best performing simulation: $", scales::comma(round(max(final_outcomes$account_balance), 0)), " (", round(max(final_outcomes$final_return_pct), 1), "% return)\n")
cat("- Worst performing simulation: $", scales::comma(round(min(final_outcomes$account_balance), 0)), " (", round(min(final_outcomes$final_return_pct), 1), "% return)\n")
cat("- Range between best and worst: $", scales::comma(round(max(final_outcomes$account_balance) - min(final_outcomes$account_balance), 0)), "\n\n")

# Expected value validation
theoretical_expected <- initial_acct * (1.05)^35  # 5% expected return per year
cat("**Expected Value Analysis:**\n")
cat("- Theoretical expected final value: $", scales::comma(round(theoretical_expected, 0)), "\n")
cat("- Actual mean from simulations: $", scales::comma(round(mean(final_outcomes$account_balance), 0)), "\n")
cat("- Difference: ", round((mean(final_outcomes$account_balance) / theoretical_expected - 1) * 100, 1), "%\n\n")

# Percentile analysis
cat("**Percentile Analysis:**\n")
cat("- 10th percentile: $", scales::comma(round(quantile(final_outcomes$account_balance, 0.1), 0)), "\n")
cat("- 25th percentile: $", scales::comma(round(quantile(final_outcomes$account_balance, 0.25), 0)), "\n")
cat("- 75th percentile: $", scales::comma(round(quantile(final_outcomes$account_balance, 0.75), 0)), "\n")
cat("- 90th percentile: $", scales::comma(round(quantile(final_outcomes$account_balance, 0.9), 0)), "\n")
```

