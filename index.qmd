---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format: html
execute:
  echo: false
  eval: true
---

# üé≤ Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Investment Game üéØ

```{r}
#| label: fig-compounding-simulation
#| fig-cap: "Monte Carlo simulation with compounding account balance"
#| echo: true

# Set seed for reproducibility
suppressPackageStartupMessages(library(tidyverse))

# Set seed for reproducibility
set.seed(123)

# Number of Coin Flips
n_flips <- 35
# Initial account balance
initial_acct <- 1000

# Create simulation data with compounding account balance
sim_data <- tibble(
  sim_num = 1:n_flips,
  coin_flip = rbinom(n = n_flips, size = 1, prob = 0.5)
) %>%
  mutate(
    # Calculate compounding account balance
    account_balance = accumulate(
      coin_flip, 
      .init = initial_acct,
      .f = ~ if_else(.y == 1, .x * 1.5, .x * 0.6)
    )[-1],  # Remove the initial value
    # Calculate the change in account balance for each round
    balance_change = account_balance - lag(account_balance, default = initial_acct)
  )

# Display first 10 results
head(sim_data, 35)

# Summary statistics
cat("\nSimulation Summary:\n")
cat("Initial balance: $", initial_acct, "\n")
cat("Final balance: $", round(tail(sim_data$account_balance, 1), 2), "\n")
cat("Total return: ", round((tail(sim_data$account_balance, 1) / initial_acct - 1) * 100, 2), "%\n")
```

## Question 1:
The expected balance of your account after one coin flip would be $1000 *1.5 = $1500 + $1000 *0.6 = $600 = $2100/2 = $1050. So the expected profit after a coin flip is $1050 - $1000 = $50.

## Question 2:
This expected value is positive so you should expect to have an account balance much higher than $1000. In this expected value situation, you should always play the game expecting to make a profit.

## Question 3:
As seen with the visualization below, our ending account balance by the age of 55 is $24,429. When I was 53 I hit the peak account value of $40,716, which sadly dropped down again but I still ended up with a profit of $23,429. The lowest point I had was two years in, at the age of 22, when I dropped to $540 account balance. Overall, I am very happy with the results, as any profit is a good one, especially one of $23,429.

## üìà Life-Long Investment Journey Visualization of above simulation

```{r}
#| label: fig-life-investment
#| fig-cap: "35-year investment journey showing account balance evolution from age 20 to 55"
#| fig-width: 12
#| fig-height: 8

# Create age-based data
sim_data_with_age <- sim_data %>%
  mutate(
    age = 20 + sim_num - 1,  # Start at age 20
    decade = floor(age / 10) * 10,  # Group by decades
    age_group = case_when(
      age < 30 ~ "20s",
      age < 40 ~ "30s", 
      age < 50 ~ "40s",
      TRUE ~ "50s"
    )
  )

# Create the main visualization
investment_plot <- ggplot(sim_data_with_age, aes(x = age, y = account_balance)) +
  # Add background grid
  theme_minimal() +
  
  # Add decade markers
  geom_vline(xintercept = seq(20, 55, 10), color = "gray90", linetype = "dotted", alpha = 0.7) +
  
  # Add horizontal reference lines
  geom_hline(yintercept = initial_acct, color = "red", linetype = "dashed", alpha = 0.8, size = 1) +
  geom_hline(yintercept = initial_acct * 2, color = "green", linetype = "dashed", alpha = 0.8, size = 1) +
  geom_hline(yintercept = initial_acct * 5, color = "blue", linetype = "dashed", alpha = 0.8, size = 1) +
  
  # Main line showing account balance
  geom_line(color = "darkblue", size = 2, alpha = 0.9) +
  
  # Points colored by win/loss
  geom_point(aes(color = factor(coin_flip)), size = 3, alpha = 0.8) +
  
  # Color scale for wins/losses
  scale_color_manual(
    values = c("0" = "#e74c3c", "1" = "#27ae60"),
    labels = c("Loss", "Win"),
    name = "Coin Flip Result"
  ) +
  
  # Y-axis formatting with even spacing
  scale_y_continuous(
    labels = scales::dollar_format(),
    breaks = seq(0, max(sim_data$account_balance) * 1.1, by = 1000),
    limits = c(0, max(sim_data$account_balance) * 1.1)
  ) +
  
  # X-axis formatting
  scale_x_continuous(
    breaks = seq(20, 55, 5),
    limits = c(20, 55)
  ) +
  
  # Labels and title
  labs(
    title = "üéØ 35-Year Investment Journey: Monte Carlo Simulation",
    subtitle = paste("Starting at $", scales::comma(initial_acct), "| Final: $", scales::comma(round(tail(sim_data$account_balance, 1), 0))),
    x = "Age",
    y = "Account Balance (Log Scale)",
    caption = "Red line: Starting balance | Green line: 2x return | Blue line: 5x return"
  ) +
  
  # Custom theme
  theme(
    plot.title = element_text(size = 18, face = "bold", color = "#2c3e50"),
    plot.subtitle = element_text(size = 14, color = "#7f8c8d", margin = margin(b = 20)),
    plot.caption = element_text(size = 10, color = "#95a5a6", hjust = 0),
    axis.title = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )

# Add annotations for key milestones
investment_plot <- investment_plot +
  # Annotate starting point
  annotate("text", x = 20.5, y = initial_acct * 1.2, 
           label = "Starting\n$1,000", 
           size = 3, color = "red", fontface = "bold") +
  
  # Annotate final point
  annotate("text", x = 54.5, y = tail(sim_data$account_balance, 1) * 1.2, 
           label = paste("Final\n$", scales::comma(round(tail(sim_data$account_balance, 1), 0))), 
           size = 3, color = "darkblue", fontface = "bold")

# Display the plot
print(investment_plot)

# Calculate and display key statistics
cat("\nüìä Investment Journey Statistics:\n")
cat("Starting age: 20\n")
cat("Ending age: 55\n")
cat("Total years: 35\n")
cat("Initial investment: $", scales::comma(initial_acct), "\n")
cat("Final balance: $", scales::comma(round(tail(sim_data$account_balance, 1), 2)), "\n")
cat("Total return: ", round((tail(sim_data$account_balance, 1) / initial_acct - 1) * 100, 2), "%\n")
cat("Annualized return: ", round(((tail(sim_data$account_balance, 1) / initial_acct)^(1/35) - 1) * 100, 2), "%\n")
cat("Win rate: ", round(mean(sim_data$coin_flip) * 100, 1), "%\n")

# Show best and worst years
max_balance_idx <- which.max(sim_data$account_balance)
min_balance_idx <- which.min(sim_data$account_balance)

cat("\nüéØ Key Milestones:\n")
cat("Peak balance: $", scales::comma(round(max(sim_data$account_balance), 2)), " at age ", 20 + max_balance_idx - 1, "\n")
cat("Lowest balance: $", scales::comma(round(min(sim_data$account_balance), 2)), " at age ", 20 + min_balance_idx - 1, "\n")
```

## üé≤ Multiple Simulation Analysis (100 Runs)

```{r}
#| label: fig-multiple-simulations
#| fig-cap: "Analysis of 100 Monte Carlo simulations showing distribution of final outcomes"
#| echo: true

# Load required packages
suppressPackageStartupMessages(library(tidyverse))

# Set parameters for multiple simulations
n_simulations <- 100
n_flips <- 35  # 35 years from age 20 to 55
initial_acct <- 1000

# Function to run a single simulation
run_single_simulation <- function(sim_id) {
  # Generate coin flips for this simulation
  coin_flips <- rbinom(n = n_flips, size = 1, prob = 0.5)
  
  # Calculate account balance over time
  account_balance <- accumulate(
    coin_flips, 
    .init = initial_acct,
    .f = ~ if_else(.y == 1, .x * 1.5, .x * 0.6)
  )[-1]  # Remove initial value
  
  # Return results for this simulation
  tibble(
    simulation_id = sim_id,
    year = 1:n_flips,
    age = 20 + year - 1,
    coin_flip = coin_flips,
    account_balance = account_balance,
    balance_change = account_balance - lag(account_balance, default = initial_acct)
  )
}

# Run 100 simulations
cat("Running", n_simulations, "simulations...\n")
all_simulations <- map_dfr(1:n_simulations, run_single_simulation)

# Calculate final outcomes for each simulation
final_outcomes <- all_simulations %>%
  filter(year == n_flips) %>%
  mutate(
    final_return_pct = (account_balance / initial_acct - 1) * 100,
    annualized_return = ((account_balance / initial_acct)^(1/35) - 1) * 100,
    outcome_category = case_when(
      account_balance > initial_acct * 10 ~ "Outstanding (>10x)",
      account_balance > initial_acct * 5 ~ "Excellent (5-10x)",
      account_balance > initial_acct * 2 ~ "Good (2-5x)",
      account_balance > initial_acct ~ "Profitable (1-2x)",
      TRUE ~ "Loss (<1x)"
    )
  )

# Summary statistics
cat("\nüìä 100 Simulation Results Summary:\n")
cat("Initial investment: $", scales::comma(initial_acct), "\n")
cat("Simulations run: ", n_simulations, "\n")
cat("Years per simulation: ", n_flips, "\n\n")

cat("Final Balance Statistics:\n")
cat("Mean final balance: $", scales::comma(round(mean(final_outcomes$account_balance), 2)), "\n")
cat("Median final balance: $", scales::comma(round(median(final_outcomes$account_balance), 2)), "\n")
cat("Min final balance: $", scales::comma(round(min(final_outcomes$account_balance), 2)), "\n")
cat("Max final balance: $", scales::comma(round(max(final_outcomes$account_balance), 2)), "\n")
cat("Standard deviation: $", scales::comma(round(sd(final_outcomes$account_balance), 2)), "\n\n")

cat("Return Statistics:\n")
cat("Mean return: ", round(mean(final_outcomes$final_return_pct), 2), "%\n")
cat("Median return: ", round(median(final_outcomes$final_return_pct), 2), "%\n")
cat("Mean annualized return: ", round(mean(final_outcomes$annualized_return), 2), "%\n")
cat("Median annualized return: ", round(median(final_outcomes$annualized_return), 2), "%\n\n")

# Count outcomes by category
outcome_summary <- final_outcomes %>%
  count(outcome_category) %>%
  mutate(percentage = round(n / n_simulations * 100, 1))

cat("Outcome Distribution:\n")
print(outcome_summary)

# Calculate probability of different outcomes
profitable_sims <- sum(final_outcomes$account_balance > initial_acct)
cat("\nüéØ Key Probabilities:\n")
cat("Probability of profit: ", round(profitable_sims / n_simulations * 100, 1), "%\n")
cat("Probability of 2x+ return: ", round(sum(final_outcomes$account_balance > initial_acct * 2) / n_simulations * 100, 1), "%\n")
cat("Probability of 5x+ return: ", round(sum(final_outcomes$account_balance > initial_acct * 5) / n_simulations * 100, 1), "%\n")
cat("Probability of 10x+ return: ", round(sum(final_outcomes$account_balance > initial_acct * 10) / n_simulations * 100, 1), "%\n")
cat("Probability of loss: ", round(sum(final_outcomes$account_balance < initial_acct) / n_simulations * 100, 1), "%\n")
```

## üìà Visualization of 100 Simulation Results

```{r}
#| label: fig-simulation-distribution
#| fig-cap: "Distribution and analysis of final outcomes from 100 Monte Carlo simulations"
#| fig-width: 12
#| fig-height: 10

# Load required packages
suppressPackageStartupMessages(library(tidyverse))

# Create object-oriented probability distribution plot
probability_distribution_plot <- ggplot(final_outcomes, aes(x = account_balance)) +
  # Add density curve (probability distribution)
  geom_density(aes(y = after_stat(density)), 
               fill = "steelblue", 
               alpha = 0.6, 
               color = "darkblue", 
               linewidth = 1.2) +
  
  # Add histogram with probability density
  geom_histogram(aes(y = after_stat(density)), 
                 bins = 25, 
                 fill = "lightblue", 
                 alpha = 0.4, 
                 color = "white", 
                 linewidth = 0.5) +
  
  # Add reference lines
  geom_vline(xintercept = initial_acct, 
             color = "red", 
             linetype = "dashed", 
             linewidth = 1.5,
             alpha = 0.8) +
  
  geom_vline(xintercept = median(final_outcomes$account_balance), 
             color = "darkgreen", 
             linetype = "solid", 
             linewidth = 1.5,
             alpha = 0.8) +
  
  geom_vline(xintercept = mean(final_outcomes$account_balance), 
             color = "purple", 
             linetype = "dotted", 
             linewidth = 1.5,
             alpha = 0.8) +
  
  # Format axes
  scale_x_continuous(
    labels = scales::dollar_format(),
    breaks = scales::pretty_breaks(n = 8),
    limits = c(0, max(final_outcomes$account_balance) * 1.1)
  ) +
  
  scale_y_continuous(
    labels = scales::percent_format(),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  
  # Add labels and title
  labs(
    title = "Probability Distribution of Final Account Balances at Age 55",
    subtitle = paste("100 Monte Carlo Simulations | Initial Investment: $", 
                     scales::comma(initial_acct), 
                     " | Mean: $", scales::comma(round(mean(final_outcomes$account_balance), 0)),
                     " | Median: $", scales::comma(round(median(final_outcomes$account_balance), 0))),
    x = "Final Account Balance at Age 55",
    y = "Probability Density",
    caption = "Red dashed line: Initial investment | Green solid line: Median | Purple dotted line: Mean"
  ) +
  
  # Custom theme
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#2c3e50", hjust = 0.5),
    plot.subtitle = element_text(size = 12, color = "#7f8c8d", hjust = 0.5, margin = margin(b = 15)),
    plot.caption = element_text(size = 10, color = "#95a5a6", hjust = 0),
    axis.title = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_line(color = "gray90", linewidth = 0.3),
    panel.grid.major.y = element_line(color = "gray90", linewidth = 0.3),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA),
    plot.margin = margin(20, 20, 20, 20)
  )

# Display the probability distribution plot
print(probability_distribution_plot)
```

## Question 4:
After running the probability distribution, I can see that after 100 simulations the probability 
distribution looks a little grim. I would say that I am happy that on average I am making money as our 
mean is 2,758 but the probability of us losing money is too high for my liking. It seems that there is a 
dense probability that we will lose money so it seems a little risky. Especially since our average is 
skewed by some very high outliers.
```{r}
#| label: prob-analysis-1000
#| echo: true

# Calculate probability of ending above $1,000
simulations_above_1000 <- sum(final_outcomes$account_balance > 1000)
probability_above_1000 <- simulations_above_1000 / n_simulations * 100

# Calculate probability of ending below $1,000 (loss)
simulations_below_1000 <- sum(final_outcomes$account_balance < 1000)
probability_below_1000 <- simulations_below_1000 / n_simulations * 100

# Calculate probability of ending exactly at $1,000 (break-even)
simulations_at_1000 <- sum(final_outcomes$account_balance == 1000)
probability_at_1000 <- simulations_at_1000 / n_simulations * 100

cat("RESULTS:\n")
cat("‚Ä¢ Simulations ending ABOVE $1,000: ", simulations_above_1000, " out of ", n_simulations, " (", round(probability_above_1000, 1), "%)\n")
cat("‚Ä¢ Simulations ending BELOW $1,000: ", simulations_below_1000, " out of ", n_simulations, " (", round(probability_below_1000, 1), "%)\n")
cat("‚Ä¢ Simulations ending AT $1,000:    ", simulations_at_1000, " out of ", n_simulations, " (", round(probability_at_1000, 1), "%)\n\n")
```

## Question 5: 
In this probability analysis it shows that the probability of the outcome being greater than $1000 is 25%. This is a very low probability for sure leaving me unhappy with the outcome. This probability is definitely too low for me to put down $1000 and risk it being significantly less for only a 25% chance of it growing in value. 