---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
  pdf: default
execute:
  echo: false
  eval: true
---

# üé≤ Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Investment Game üéØ

```{r}
#| label: fig-compounding-simulation
#| fig-cap: "Monte Carlo simulation with compounding account balance"
#| echo: true

# Set seed for reproducibility
suppressPackageStartupMessages(library(tidyverse))

# Set seed for reproducibility
set.seed(123)

# Number of Coin Flips
n_flips <- 35
# Initial account balance
initial_acct <- 1000

# Create simulation data with compounding account balance
sim_data <- tibble(
  sim_num = 1:n_flips,
  coin_flip = rbinom(n = n_flips, size = 1, prob = 0.5)
) %>%
  mutate(
    # Calculate compounding account balance
    account_balance = accumulate(
      coin_flip, 
      .init = initial_acct,
      .f = ~ if_else(.y == 1, .x * 1.5, .x * 0.6)
    )[-1],  # Remove the initial value
    # Calculate the change in account balance for each round
    balance_change = account_balance - lag(account_balance, default = initial_acct)
  )

# Display first 10 results
head(sim_data, 35)

# Summary statistics
cat("\nSimulation Summary:\n")
cat("Initial balance: $", initial_acct, "\n")
cat("Final balance: $", round(tail(sim_data$account_balance, 1), 2), "\n")
cat("Total return: ", round((tail(sim_data$account_balance, 1) / initial_acct - 1) * 100, 2), "%\n")
```

## Question 1:
The expected balance of your account after one coin flip would be $1000 *1.5 = $1500 + $1000 *0.6 = $600 = $2100/2 = $1050. So the expected profit after a coin flip is $1050 - $1000 = $50.

## Question 2:
This expected value is positive so you should expect to have an account balance much higher than $1000. In this expected value situation, you should always play the game expecting to make a profit.

## Question 3:
As seen with the visualization below, our ending account balance by the age of 55 is $24,429. When I was 53 I hit the peak account value of $40,716, which sadly dropped down again but I still ended up with a profit of $23,429. The lowest point I had was two years in, at the age of 22, when I dropped to $540 account balance. Overall, I am very happy with the results, as any profit is a good one, especially one of $23,429.

## üìà Life-Long Investment Journey Visualization of above simulation

```{r}
#| label: fig-life-investment
#| fig-cap: "35-year investment journey showing account balance evolution from age 20 to 55"
#| fig-width: 12
#| fig-height: 8

# Create age-based data
sim_data_with_age <- sim_data %>%
  mutate(
    age = 20 + sim_num - 1,  # Start at age 20
    decade = floor(age / 10) * 10,  # Group by decades
    age_group = case_when(
      age < 30 ~ "20s",
      age < 40 ~ "30s", 
      age < 50 ~ "40s",
      TRUE ~ "50s"
    )
  )

# Create the main visualization
investment_plot <- ggplot(sim_data_with_age, aes(x = age, y = account_balance)) +
  # Add background grid
  theme_minimal() +
  
  # Add decade markers
  geom_vline(xintercept = seq(20, 55, 10), color = "gray90", linetype = "dotted", alpha = 0.7) +
  
  # Add horizontal reference lines
  geom_hline(yintercept = initial_acct, color = "red", linetype = "dashed", alpha = 0.8, size = 1) +
  geom_hline(yintercept = initial_acct * 2, color = "green", linetype = "dashed", alpha = 0.8, size = 1) +
  geom_hline(yintercept = initial_acct * 5, color = "blue", linetype = "dashed", alpha = 0.8, size = 1) +
  
  # Main line showing account balance
  geom_line(color = "darkblue", size = 2, alpha = 0.9) +
  
  # Points colored by win/loss
  geom_point(aes(color = factor(coin_flip)), size = 3, alpha = 0.8) +
  
  # Color scale for wins/losses
  scale_color_manual(
    values = c("0" = "#e74c3c", "1" = "#27ae60"),
    labels = c("Loss", "Win"),
    name = "Coin Flip Result"
  ) +
  
  # Y-axis formatting with even spacing
  scale_y_continuous(
    labels = scales::dollar_format(),
    breaks = seq(0, max(sim_data$account_balance) * 1.1, by = 1000),
    limits = c(0, max(sim_data$account_balance) * 1.1)
  ) +
  
  # X-axis formatting
  scale_x_continuous(
    breaks = seq(20, 55, 5),
    limits = c(20, 55)
  ) +
  
  # Labels and title
  labs(
    title = "üéØ 35-Year Investment Journey: Monte Carlo Simulation",
    subtitle = paste("Starting at $", scales::comma(initial_acct), "| Final: $", scales::comma(round(tail(sim_data$account_balance, 1), 0))),
    x = "Age",
    y = "Account Balance (Log Scale)",
    caption = "Red line: Starting balance | Green line: 2x return | Blue line: 5x return"
  ) +
  
  # Custom theme
  theme(
    plot.title = element_text(size = 18, face = "bold", color = "#2c3e50"),
    plot.subtitle = element_text(size = 14, color = "#7f8c8d", margin = margin(b = 20)),
    plot.caption = element_text(size = 10, color = "#95a5a6", hjust = 0),
    axis.title = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )

# Add annotations for key milestones
investment_plot <- investment_plot +
  # Annotate starting point
  annotate("text", x = 20.5, y = initial_acct * 1.2, 
           label = "Starting\n$1,000", 
           size = 3, color = "red", fontface = "bold") +
  
  # Annotate final point
  annotate("text", x = 54.5, y = tail(sim_data$account_balance, 1) * 1.2, 
           label = paste("Final\n$", scales::comma(round(tail(sim_data$account_balance, 1), 0))), 
           size = 3, color = "darkblue", fontface = "bold") +
  

# Display the plot
print(investment_plot)

# Calculate and display key statistics
cat("\nüìä Investment Journey Statistics:\n")
cat("Starting age: 20\n")
cat("Ending age: 55\n")
cat("Total years: 35\n")
cat("Initial investment: $", scales::comma(initial_acct), "\n")
cat("Final balance: $", scales::comma(round(tail(sim_data$account_balance, 1), 2)), "\n")
cat("Total return: ", round((tail(sim_data$account_balance, 1) / initial_acct - 1) * 100, 2), "%\n")
cat("Annualized return: ", round(((tail(sim_data$account_balance, 1) / initial_acct)^(1/35) - 1) * 100, 2), "%\n")
cat("Win rate: ", round(mean(sim_data$coin_flip) * 100, 1), "%\n")

# Show best and worst years
max_balance_idx <- which.max(sim_data$account_balance)
min_balance_idx <- which.min(sim_data$account_balance)

cat("\nüéØ Key Milestones:\n")
cat("Peak balance: $", scales::comma(round(max(sim_data$account_balance), 2)), " at age ", 20 + max_balance_idx - 1, "\n")
cat("Lowest balance: $", scales::comma(round(min(sim_data$account_balance), 2)), " at age ", 20 + min_balance_idx - 1, "\n")
```
